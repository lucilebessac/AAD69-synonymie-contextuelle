import torch
import torch.serialization
from numpy.core.multiarray import _reconstruct
from spacy_conll import init_parser
import pandas as pd

def patch_torch_load():
    """
    Patch la fonction torch.load pour √©viter les erreurs de chargement de mod√®le.
    Je ne me souviens pas pr√©cis√©ment quelle est l'errzeur mais la fonction de 
    g√©n√©ration du conll n√©cessite de patcher torch.load pour √©viter les erreurs. 
    Je ne sais pas si c'est li√© √† la version de torch ou √† un autre probl√®me.
    :return: None  
    """
    torch.serialization.add_safe_globals([_reconstruct])

    # Probl√®me sur la fonction torch.load / weights_only=False
    original_torch_load = torch.load

    def patched_torch_load(*args, **kwargs):
        if 'weights_only' not in kwargs:
            kwargs['weights_only'] = False
        return original_torch_load(*args, **kwargs)
    
    torch.load = patched_torch_load

def generate_conll(text, filename):
    """
    G√©n√®re un fichier CoNLL √† partir d'un texte donn√© en utilisant Stanza.
    :param text: Texte √† analyser
    :param filename: Nom du fichier de sortie (sans extension)
    """
    nlp = init_parser("fr",
                    "stanza",
                    parser_opts={"use_gpu": True, "verbose": False},
                    include_headers=True)
    doc = nlp(text)

    # sauvegarder au format .conll
    conll = doc._.conll_str
    with open(f"{filename}.conll", "w", encoding="utf-8") as f:
        f.write(conll)

    conll_df = doc._.conll_pd
    conll_df.to_csv(f"{filename}.csv", sep="\t", index=False)


def extraire_heads_et_core_arguments(fichier_csv):
    """
    Extrait les pr√©dicats principaux et leurs core arguments √† partir d'un fichier CoNLL CSV.
    Chaque entr√©e aura un ID unique et contiendra la forme du HEAD.

    :param fichier_csv: Chemin du fichier CSV
    :return: Liste des pr√©dicats avec leurs core arguments sous forme de dictionnaire
    """
    # Charger le fichier CSV
    df = pd.read_csv(fichier_csv, sep=None, engine='python')  # Auto-d√©tecter le s√©parateur

    # V√©rifier si les colonnes n√©cessaires sont pr√©sentes
    if not {"HEAD", "DEPREL", "UPOS", "FORM", "ID"}.issubset(df.columns):
        print("Erreur : Colonnes n√©cessaires ('HEAD', 'DEPREL', 'UPOS', 'FORM', 'ID') manquantes.")
        return []

    # √âtape 1 : Identification des pr√©dicats principaux
    # Liste des conditions pour identifier les pr√©dicats principaux
    conditions_heads_predicats = (
        (df["UPOS"] == "VERB") |  # Tous les VERB doivent √™tre pris
        ((df["UPOS"].isin(["ADJ", "NOUN"])) & (df["DEPREL"].isin(["root", "conj", "ccomp", "xcomp", "advcl", "acl:relcl"])))  # Adjectifs/Noms avec copule
    )

    # Liste des ID qui sont des pr√©dicats principaux
    # V√©rification des conditions
    heads_predicats = df.loc[conditions_heads_predicats, "ID"].dropna().astype(int).unique().tolist()
    print(heads_predicats)
    
    # √âtape 2 : Extraction des core arguments li√©s aux pr√©dicats
    core_arguments = {}
    id_counter = 1  # Initialisation de l'ID unique

    for _, row in df.iterrows():
        head_id = row["HEAD"]  # Num√©ro du gouverneur
        dep = row["DEPREL"]  # Relation syntaxique
        form = row["FORM"]  # Mot correspondant

        # V√©rifier si le HEAD fait partie des pr√©dicats principaux
        if head_id in heads_predicats:
            # R√©cup√©rer la forme du HEAD en utilisant son ID
            head_form = df.loc[df["ID"] == head_id, "FORM"].values
            head_form = head_form[0] if len(head_form) > 0 else None  # √âviter les erreurs si HEAD est absent

            if head_id not in core_arguments:
                core_arguments[head_id] = {
                    "id": id_counter,  # Associer un ID unique
                    "head": head_form,  # Ajouter la **forme du HEAD** dans le dictionnaire
                    "nsubj": [],
                    "obj": [],
                    "iobj": [],
                    "cop": []
                }
                id_counter += 1  # Incr√©menter l'ID

            # Ajouter les arguments selon la relation
            if dep == "nsubj":
                core_arguments[head_id]["nsubj"].append(form)
            elif dep == "obj":
                core_arguments[head_id]["obj"].append(form)
            elif dep == "iobj":
                core_arguments[head_id]["iobj"].append(form)
            elif dep == "cop":
                core_arguments[head_id]["cop"].append(form)
            # Ajouter d'autres relations si n√©cessaire

    return heads_predicats, core_arguments

def main():
    # patch_torch_load()

    text = "Le sol est mouill√© parce qu‚Äôil a plu cette nuit."
    chemin = "../data/"
    filename = "pluie"
    filename = chemin + filename
    generate_conll(text, filename)

    print(f"Fichiers {filename}.conll et {filename}.csv g√©n√©r√©s avec succ√®s !")

    fichier_csv = f"{filename}.csv"  # Mets ici le bon chemin de ton fichier
    heads_predicats, core_args = extraire_heads_et_core_arguments(fichier_csv)

    # Affichage des r√©sultats
    print("\nüîπ **Liste des HEADs correspondant aux pr√©dicats principaux :**")
    print(heads_predicats)

    print("\nüîπ **Core Arguments extraits avec ID unique et FORME du HEAD :**")
    for head, args in core_args.items():
        print(f"HEAD '{args['head']}': {args}")


if __name__ == "__main__":
    main()
